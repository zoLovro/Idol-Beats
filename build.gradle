
buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    gradlePluginPortal()
    mavenLocal()
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
  }
  dependencies {


  }
}
plugins {
  id 'java'
  id 'io.github.fourlastor.construo' version '2.0.1'
}


construo {
  // name of the executable
  name.set("Ryn")
  // human-readable name, used for example in the `.app` name for macOS
  humanName.set("Ryn")
  // Optional, defaults to application.mainClass or jar task main class
  mainClass.set("io.github.lovrohk.Main")
  // Optional, defaults to $buildDir/construo/dist
  // where to put the packaged zips
  outputDir.set(rootProject.file("dist"))
  // Optional, an alternative jar task name to base the build upon
  jarTask.set("myJarTaskName")
  // Optional, a folder to use as the root in the zip output file
  zipFolder.set("game-v1.0.0")
}


allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}

configure(subprojects) {
  apply plugin: 'java-library'
  sourceCompatibility = 20

  // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
  // The article can be helpful when using assets.txt in your project.
  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")
    // projectFolder/assets
    File assetsFolder = new File("${project.rootDir}/assets/")
    // projectFolder/assets/assets.txt
    File assetsFile = new File(assetsFolder, "assets.txt")
    // delete that file in case we've already created it
    assetsFile.delete()

    // iterate through all files inside that folder
    // convert it to a relative path
    // and append it to the file assets.txt
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.sort().each {
      assetsFile.append(it + "\n")
    }
  }
  processResources.dependsOn 'generateAssetList'

  compileJava {
    options.incremental = true
  }
}

subprojects {
  version = "$projectVersion"
  ext.appName = 'LoveLiveRythmGame'
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    // You may want to remove the following line if you have errors downloading dependencies.
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
  }
}

eclipse.project.name = 'LoveLiveRythmGame' + '-parent'

tasks.register('fatJar', Jar) {
  archiveBaseName = 'MyGame'
  manifest {
    attributes 'Main-Class': 'Main'
  }
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  from sourceSets.main.output
}


