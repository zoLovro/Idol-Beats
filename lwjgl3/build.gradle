buildscript {
  repositories {
    gradlePluginPortal()
  }
  dependencies {
    classpath "io.github.fourlastor:construo:1.7.1"
    if(enableGraalNative == 'true') {
      classpath "org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:0.9.28"
    }
  }
}

plugins {
  id "application"
  id 'io.github.fourlastor.construo' version '2.0.1'
}
apply plugin: 'io.github.fourlastor.construo'

import io.github.fourlastor.construo.Target

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
mainClassName = 'io.github.lovrohk.lwjgl3.Lwjgl3Launcher'
application.setMainClass(mainClassName)
eclipse.project.name = appName + '-lwjgl3'

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

if (JavaVersion.current().isJava9Compatible()) {
  compileJava.options.release.set(17)
}

dependencies {
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  implementation "games.rednblack.miniaudio:miniaudio:$miniaudioVersion:natives-desktop"
  implementation project(':core')
  implementation("com.badlogicgames.gdx:gdx-tools:$gdxVersion") {
    exclude group: 'com.badlogicgames.gdx', module: 'gdx-backend-lwjgl'
  }

  if(enableGraalNative == 'true') {
    implementation "io.github.berstanio:gdx-svmhelper-backend-lwjgl3:$graalHelperVersion"
  }
}

tasks.register("generateMapIndex") {
  def mapsDir = file("../assets/maps")
  def indexFile = new File(mapsDir, "index.json")

  doLast {
    if (!mapsDir.exists() || !mapsDir.isDirectory()) {
      println "WARNING: maps folder not found: ${mapsDir.absolutePath}"
      return
    }

    def mapFolders = []
    mapsDir.eachDir { dir ->
      mapFolders << dir.name
    }

    indexFile.text = groovy.json.JsonOutput.prettyPrint(
      groovy.json.JsonOutput.toJson([maps: mapFolders])
    )
    println "Generated index.json with ${mapFolders.size()} maps"
  }
}


tasks.named("run").configure {
  doFirst {
    copy {
      from(project(":core").file("assets"))
      into(file("assets"))
    }
  }
}

construo {
  // name of the executable
  name.set("Ryn")
  // human-readable name, used for example in the `.app` name for macOS
  humanName.set("Ryn")
  // Optional, defaults to application.mainClass or jar task main class
  mainClass.set("io.github.lovrohk.Main")
  // Optional, defaults to $buildDir/construo/dist
  // where to put the packaged zips
  outputDir.set(rootProject.file("dist"))
  // Optional, an alternative jar task name to base the build upon
  jarTask.set("myJarTaskName")
  // Optional, a folder to use as the root in the zip output file
  zipFolder.set("game-v1.0.0")
}

tasks.register('fatJar', Jar) {
  archiveBaseName.set('MyGame')
  manifest {
    attributes 'Main-Class': 'io.github.lovrohk.lwjgl3.Lwjgl3Launcher'
  }

  // Include lwjgl3 compiled classes
  from sourceSets.main.output

  // Include core module classes
  from(project(':core').sourceSets.main.output)

  // Include runtime dependencies
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }

  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}





// Keep the rest of your desktop-specific tasks (jar, jarMac/Linux/Win, construo, etc.) as-is
